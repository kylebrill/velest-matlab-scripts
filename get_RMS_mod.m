function [rmsmin] = get_RMS_mod(outfile, startRow, endRow)
%GET_RMS_MOD Extracts final RMS values from .OUT files of velest runs.
%   [RMSMIN] = GET_RMS_MOD(OUTFILE) Reads data from .OUT file OUTFILE for 
%   the default selection.
%
%   [RMSMIN] = GET_RMS_MOD(OUTFILE, STARTROW, ENDROW) Reads data from rows 
%   STARTROW through ENDROW of .OUT file OUTFILE.
%
% Example:
%   [rmsmin] = get_RMS_mod('fuegorandtrial01.OUT',1, 8713);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/04/02 20:09:02
% Last Edited and Expanded by Kyle Brill on 2016/04/02 20:40:00

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: text (%s)
%	column4: text (%s)
%   column5: text (%s)
%	column6: text (%s)
%   column7: text (%s)
%	column8: text (%s)
%   column9: text (%s)
%	column10: text (%s)
%   column11: text (%s)
%	column12: text (%s)
%   column13: text (%s)
%	column14: text (%s)
%   column15: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(outfile,'r');

if fileID == -1
    error('File not found.')
end
%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'EmptyValue' ,NaN,'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'EmptyValue' ,NaN,'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

if length(dataArray) < 9
    error('Input file is not formatted correctly.')
end
%% Allocate imported array to column variable names

VarName7 = dataArray{:, 7};
VarName8 = dataArray{:, 8};
VarName9 = dataArray{:, 9};

%% Pull out indices of RMS RESIDUAL

indRMS=strcmp(VarName7,'RMS'); %Find indexes of strings in collumn 7 
indRESIDUAL=strcmp(VarName8,'RESIDUAL='); %Find indexes of strings in collumn 8
indRMSVAL=indRMS+indRESIDUAL;
indRMSVAL=indRMSVAL>1; %Find indexes where they match and pull value from collumn 9

if sum(indRMSVAL) < 1
    error('Could not find RMS Values. Check input file.')
end

if length(VarName9) ~= length(indRMSVAL)
    error('Input file format is incorrect. Check input file.')
end

rmsval=VarName9(indRMSVAL);
rmsval=cellfun(@str2num,rmsval);

%% Right now, all I care about is the RMS from the final iteration, so the only output of the function will be as such, but this can be changed easily...

rmsmin=rmsval(length(rmsval));